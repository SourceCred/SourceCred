// @flow

import {Command} from "@oclif/command";
import fs from "fs";
import stringify from "json-stable-stringify";
import {promisify} from "util";

import {Graph} from "../../core/graph";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

export default class CombineCommand extends Command {
  static description =
    "combine multiple contribution graphs into one big graph";

  // We disable strict-mode so that we can accept a variable number of
  // arguments. Although this is what the docs [1] suggest, it doesn't
  // seem like the best way to do it. TODO: Investigate.
  //
  // [1]: https://oclif.io/docs/commands.html
  static strict = false;

  static usage =
    "" +
    "combine [GRAPH]...\n" +
    "  where each GRAPH is a JSON file generated by plugin-graph";

  async run() {
    const {argv} = this.parse(CombineCommand);
    combine(argv);
  }
}

async function combine(filenames: $ReadOnlyArray<string>) {
  const readFile = promisify(fs.readFile);
  const graphs = await Promise.all(
    filenames.map((filename) =>
      readFile(filename).then((contents) =>
        Graph.fromJSON(JSON.parse(contents))
      )
    )
  );
  const result = Graph.mergeConservative(graphs);
  console.log(stringify(result, {space: 4}));
}
